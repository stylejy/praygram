---
description:
globs:
alwaysApply: true
---
# Technical Requirements Document (TRD)

## 1. Executive Technical Summary
- **프로젝트 개요**  
  ‘Praygram’은 Next.js 기반 PWA 웹·앱으로, 사용자가 기도제목을 등록·편집·삭제하고 그룹 내에서 “기도했습니다” 리액션을 실시간으로 주고받는 온라인 기도 커뮤니티입니다. Supabase(Postgres·Auth·Storage)를 백엔드로 활용하며, Vercel에 배포하여 SSR·ISR을 통한 빠른 초기 로드와 안정적인 호스팅 환경을 제공합니다.
- **핵심 기술 스택**  
  Next.js, TypeScript, Supabase, Vercel, Workbox(Service Worker)
- **주요 기술 목표**  
  • 페이지 로드 P95 < 2초  
  • 월 10만 건 이상 기도제목 처리 가능 확장성  
  • TLS 1.2 이상 및 Supabase RLS·JWT 기반 보안  
  • 오프라인에서도 최근 기도제목 조회·등록 지원  
- **핵심 가정 사항**  
  • 사용자 규모: 초기 MAU 1,000명, 장기 10만명 이상  
  • 네트워크 불안정 환경에서도 PWA 오프라인 캐싱으로 기본 기능 제공  
  • Kakao OAuth 안정적 제공 및 Supabase 연동

## 2. Tech Stack

| Category          | Technology / Library             | Reasoning (선택 이유)                                                     |
| ----------------- | -------------------------------- | ------------------------------------------------------------------------- |
| 프레임워크        | Next.js (v13.x)                  | SSR·ISR 지원, PWA 친화적 라우팅 및 빌트인 이미지 최적화                    |
| 언어              | TypeScript (v4.x)                | 정적 타입 안정성 확보, 코드 완성도 및 유지보수성 향상                      |
| 인증/인가         | Supabase Auth + Kakao OAuth      | 통합된 JWT 발급·RLS 지원, 카카오 간편 로그인 연동                          |
| API 설계          | Next.js API Routes (RESTful)     | 단일 프레임워크 내 RESTful 엔드포인트 구현 용이                             |
| 데이터베이스      | Supabase PostgreSQL              | 완전관리형 Postgres, RLS·Realtime·Storage 통합 제공                        |
| 상태관리          | React Context + SWR              | 경량 상태관리·데이터 패칭, SWR의 Stale-While-Revalidate 캐싱               |
| 스타일링          | Tailwind CSS (v3.x)              | 유틸리티 클래스 기반 빠른 스타일링, 반응형 레이아웃 지원                  |
| PWA/오프라인      | Workbox + Service Worker         | 오프라인 캐싱 전략, 푸시 알림 지원, manifest.json 관리                    |
| 푸시알림          | Web Push API (VAPID)             | 브라우저 푸시 표준, Supabase Functions와 연동 가능                         |
| 배포/호스팅       | Vercel                            | Next.js 최적화 호스팅, CDN 자동 캐싱, CI/CD 내장                           |
| 모니터링/로깅     | Sentry + Vercel Analytics        | 오류 추적·성능 모니터링, 배포별 통계 수집                                  |

## 3. System Architecture Design

### Top-Level Building Blocks
- **PWA 프론트엔드 (Next.js)**  
  • 페이지(SSR·ISR)  
  • API Route (로그인·기도제목·그룹·리액션)  
  • 서비스 워커(Workbox)  
- **Supabase Backend**  
  • PostgreSQL 데이터베이스 (users, groups, group_members, prayers, reactions)  
  • Auth (JWT, RLS)  
  • Realtime & Storage  
- **Kakao OAuth 연동**  
  • Next.js API에서 OAuth 콜백 처리  
  • Supabase Auth 사용자 생성/조회  
- **배포 및 CDN (Vercel)**  
  • 글로벌 엣지 네트워크  
  • 자동 SSL/TLS 관리  
- **모니터링 & 로깅**  
  • Sentry 오류 추적  
  • Vercel Analytics 성능 지표

### Top-Level Component Interaction Diagram
```mermaid
graph TD
    A[User Device(PWA)] --> B[Next.js Frontend]
    B --> C[Next.js API Routes]
    C --> D[Supabase PostgreSQL]
    C --> E[Supabase Auth]
    A --> F[Service Worker(Workbox)]
    B --> G[Kakao OAuth]
    D --> H[Realtime Subscription]
```

- 사용자가 PWA(Next.js) UI에서 API 호출  
- Next.js API가 Supabase Auth 및 PostgreSQL과 통신  
- Kakao OAuth 콜백을 Next.js API에서 처리 후 JWT 발급  
- Service Worker가 오프라인 캐싱 및 푸시 수신 담당  
- Supabase Realtime을 통해 리액션 카운트 실시간 업데이트  

### Code Organization & Convention

**Domain-Driven Organization Strategy**  
- Domain Separation: user, auth, group, prayer, reaction  
- Layer-Based Architecture: presentation (pages/components), business logic (services), data access (lib/supabase), infrastructure (API routes)  
- Feature-Based Modules: 각 도메인별 독립 폴더  
- Shared Components: 공통 UI, 유틸리티, 타입 정의  

**Universal File & Folder Structure**
```
/
├── pages
│   ├── api
│   │   ├── auth
│   │   ├── groups
│   │   ├── prayers
│   │   └── reactions
│   ├── _app.tsx
│   ├── index.tsx
│   └── [...]
├── components
│   ├── Auth
│   ├── Group
│   ├── Prayer
│   └── Reaction
├── services
│   ├── authService.ts
│   ├── groupService.ts
│   ├── prayerService.ts
│   └── reactionService.ts
├── lib
│   ├── supabaseClient.ts
│   └── kakaoClient.ts
├── hooks
│   ├── useAuth.ts
│   └── useSWRFetch.ts
├── public
│   ├── manifest.json
│   └── icons/
├── styles
│   └── globals.css
├── sw.js
├── next.config.js
├── tsconfig.json
└── vercel.json
```

### Data Flow & Communication Patterns
- **Client-Server 통신**: fetch/SWR 기반 RESTful API 호출, 오류 처리 및 재시도 로직  
- **Database Interaction**: supabase-js 클라이언트 사용, RLS 정책 적용, 트랜잭션 관리  
- **External Service Integration**: Kakao SDK → Next.js API → Supabase Auth  
- **Real-time Communication**: Supabase Realtime 채널로 리액션 카운트 자동 업데이트  
- **Data Synchronization**: SWR의 stale-while-revalidate, Service Worker 큐잉으로 오프라인 동기화

## 4. Performance & Optimization Strategy
- ISR(Incremental Static Regeneration)·SSR 병행 사용으로 페이지 로딩 최적화  
- next/image 활용한 이미지 자동 최적화 및 lazy loading  
- Tailwind CSS JIT 모드로 CSS 번들 최소화  
- Vercel CDN 캐싱 헤더 설정, Edge 네트워크 활용  
- SWR 재검증·데이터 프리페치로 UX 부드러움 확보

## 5. Implementation Roadmap & Milestones

### Phase 1: Foundation (MVP Implementation)
- **Core Infrastructure**: Next.js 프로젝트 설정, Supabase 프로젝트 및 RLS 적용, Vercel 배포 파이프라인  
- **Essential Features**: 기도제목 CRUD, 그룹 생성·초대·권한, 리액션, Kakao 로그인, 반응형 UI  
- **Basic Security**: TLS 설정, Supabase RLS 및 JWT 검증  
- **Development Setup**: ESLint·Prettier, Git Flow, Vercel Preview 배포  
- **Timeline**: W1~W6

### Phase 2: Feature Enhancement
- **Advanced Features**: PWA 오프라인 캐싱, 웹푸시, 검색·필터, 다크모드·접근성(ARIA)  
- **Performance Optimization**: Lighthouse PWA 90+ 달성, 번들 분석 및 최적화  
- **Enhanced Security**: CSP 헤더, 보안 감사 스크립트 추가  
- **Monitoring Implementation**: Sentry 통합, Vercel Analytics 대시보드 구성  
- **Timeline**: W7~W8

### Phase 3: Scaling & Optimization
- **Scalability Implementation**: Postgres 파티셔닝, Read Replica, Edge Functions 활용  
- **Advanced Integrations**: Google·Apple 로그인 옵션, Supabase Functions 확장  
- **Enterprise Features**: 관리자 대시보드 고도화, 감사 로그, 보고서 생성  
- **Compliance & Auditing**: GDPR, SOC2 등 규제 준수 기능  
- **Timeline**: W9~W14

## 6. Risk Assessment & Mitigation Strategies

### Technical Risk Analysis
- **Technology Risks**: Next.js SSR 응답 지연 → ISR 적용, CDN 캐싱 강화  
- **Performance Risks**: 대량 데이터 처리 시 DB 병목 → 파티셔닝·인덱스 최적화  
- **Security Risks**: OAuth 토큰 유출 → RLS·JWT 만료 정책 엄격 적용  
- **Integration Risks**: Kakao API 변경 → 폴백으로 Google·Apple 준비  
- **Mitigation Strategies**: 로드테스트, 자동화된 보안 스캔, 장애 복구 문서화

### Project Delivery Risks
- **Timeline Risks**: 연계 기능 지연 → 우선순위 조정, 병렬 개발  
- **Resource Risks**: Supabase 경험 부족 → 사전 PoC, 기술 워크숍  
- **Quality Risks**: 테스트 커버리지 부족 → CI 테스트 파이프라인 강화  
- **Deployment Risks**: 환경 변수 누락 → GitHub Secrets·Vercel 환경 변수 관리  
- **Contingency Plans**: 롤백 절차 문서화, 블루-그린 배포 전략 준비
